definitions:
  models.Crdt:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  models.Image:
    properties:
      name:
        type: string
      tag:
        type: string
    type: object
  models.ImageWithCID:
    properties:
      cid:
        type: string
      name:
        type: string
      tag:
        type: string
    type: object
  models.StrategyPayload:
    properties:
      execute:
        type: boolean
      nametag:
        type: string
      percentage:
        type: integer
      target:
        type: string
      type:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: a.aksoy@tu-berlin.de
    name: Ahmet Kerem Aksoy
  description: DistroMash meshes your Docker Distribution
  termsOfService: http://swagger.io/terms/
  title: DistroMash API
  version: "1.0"
paths:
  /api/v1/crdt:
    delete:
      consumes:
      - application/json
      description: Purge datastore.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Crdt'
      summary: purge datastore
      tags:
      - Crdt
    get:
      consumes:
      - application/json
      description: Get all CRDT key-value pairs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Crdt'
            type: array
      summary: get all crdt key-value pairs
      tags:
      - Crdt
    post:
      consumes:
      - application/json
      description: Post a CRDT key-value pair.
      parameters:
      - description: Post Crdt
        in: body
        name: crdt
        required: true
        schema:
          $ref: '#/definitions/models.Crdt'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Crdt'
      summary: post crdt key-value pair
      tags:
      - Crdt
  /api/v1/crdt/{key}:
    delete:
      consumes:
      - application/json
      description: Delete a CRDT key-value pair.
      parameters:
      - description: Key of Value
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Crdt'
      summary: delete crdt key-value pair
      tags:
      - Crdt
    get:
      consumes:
      - application/json
      description: Get the CRDT value by key.
      parameters:
      - description: Key of Value
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Crdt'
      summary: get crdt value by given key
      tags:
      - Crdt
  /api/v1/image:
    post:
      consumes:
      - application/json
      description: Upload a multi-platform docker image to ipfs and get the cid.
      parameters:
      - description: Post Image
        in: body
        name: crdt
        required: true
        schema:
          $ref: '#/definitions/models.Image'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ImageWithCID'
      summary: upload a multi-platform docker image to ipfs and get the cid
      tags:
      - Image
  /api/v1/pin/{cid}:
    post:
      consumes:
      - application/json
      description: Pin cid.
      parameters:
      - description: Cid
        in: path
        name: cid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Crdt'
      summary: pin cid
      tags:
      - Cid
  /api/v1/strategy:
    get:
      consumes:
      - application/json
      description: Get all strategies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.StrategyPayload'
            type: array
      summary: get all strategies
      tags:
      - Strategy
    post:
      consumes:
      - application/json
      description: Post the strategy.
      parameters:
      - description: Post Strategy
        in: body
        name: strategy
        required: true
        schema:
          $ref: '#/definitions/models.StrategyPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StrategyPayload'
      summary: post the strategy
      tags:
      - Strategy
    put:
      consumes:
      - application/json
      description: Update the strategy.
      parameters:
      - description: Put Strategy
        in: body
        name: strategy
        required: true
        schema:
          $ref: '#/definitions/models.StrategyPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StrategyPayload'
      summary: update the strategy
      tags:
      - Strategy
  /api/v1/strategy/{key}:
    delete:
      consumes:
      - application/json
      description: Delete the strategy.
      parameters:
      - description: Delete Strategy
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StrategyPayload'
      summary: delete the strategy
      tags:
      - Strategy
    get:
      consumes:
      - application/json
      description: Get the strategy.
      parameters:
      - description: Key of Strategy
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StrategyPayload'
      summary: get the strategy
      tags:
      - Strategy
swagger: "2.0"
